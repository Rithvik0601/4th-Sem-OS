#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;          // Process ID
    int arrival_time; // Arrival Time
    int burst_time;   // Burst Time
    int priority;     // Priority
    int remaining_burst_time; // Remaining Burst Time (used in Preemptive Scheduling)
    int waiting_time; // Waiting Time
    int turnaround_time; // Turnaround Time
    int completion_time; // Completion Time
    int is_completed; // Completion flag (used in Preemptive Scheduling)
};

// Function to sort processes based on arrival time and priority (used for both algorithms)
void sortProcesses(struct Process proc[], int n) {
    struct Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (proc[i].arrival_time > proc[j].arrival_time ||
                (proc[i].arrival_time == proc[j].arrival_time && proc[i].priority > proc[j].priority)) {
                temp = proc[i];
                proc[i] = proc[j];
                proc[j] = temp;
            }
        }
    }
}

// Non-preemptive Priority Scheduling
void nonPreemptivePriorityScheduling(struct Process proc[], int n) {
    int total_wt = 0, total_tat = 0;
    int time = 0;

    for (int i = 0; i < n; i++) {
        // Check if the process has arrived by the current time
        if (proc[i].arrival_time > time) {
            time = proc[i].arrival_time;
        }

        // Process execution
        proc[i].waiting_time = time - proc[i].arrival_time;
        proc[i].turnaround_time = proc[i].waiting_time + proc[i].burst_time;
        proc[i].completion_time = time + proc[i].burst_time;

        time = proc[i].completion_time;

        total_wt += proc[i].waiting_time;
        total_tat += proc[i].turnaround_time;
    }

    // Display results
    printf("\nProcess ID\tBurst Time\tPriority\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].id, proc[i].burst_time, proc[i].priority,
               proc[i].arrival_time, proc[i].waiting_time, proc[i].turnaround_time);
    }
    printf("\nAverage Waiting Time: %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_tat / n);
}

// Preemptive Priority Scheduling
void preemptivePriorityScheduling(struct Process proc[], int n) {
    int total_wt = 0, total_tat = 0;
    int time = 0, completed = 0;

    // Initialize remaining burst time and completion flag
    for (int i = 0; i < n; i++) {
        proc[i].remaining_burst_time = proc[i].burst_time;
        proc[i].is_completed = 0;
    }

    while (completed < n) {
        int idx = -1;
        int min_priority = 1000;

        // Find process with the highest priority (lowest priority number) that is ready to execute
        for (int i = 0; i < n; i++) {
            if (proc[i].arrival_time <= time && proc[i].remaining_burst_time > 0 && proc[i].priority < min_priority) {
                min_priority = proc[i].priority;
                idx = i;
            }
        }

        if (idx != -1) {
            // Execute the process
            proc[idx].remaining_burst_time--;
            time++;

            // Check if the process is completed
            if (proc[idx].remaining_burst_time == 0) {
                proc[idx].completion_time = time;
                proc[idx].turnaround_time = proc[idx].completion_time - proc[idx].arrival_time;
                proc[idx].waiting_time = proc[idx].turnaround_time - proc[idx].burst_time;

                total_wt += proc[idx].waiting_time;
                total_tat += proc[idx].turnaround_time;
                completed++;
                proc[idx].is_completed = 1;
            }
        } else {
            time++; // If no process is ready to execute, increment time
        }
    }

    // Display results
    printf("\nProcess ID\tBurst Time\tPriority\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].id, proc[i].burst_time, proc[i].priority,
               proc[i].arrival_time, proc[i].waiting_time, proc[i].turnaround_time);
    }
    printf("\nAverage Waiting Time: %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_tat / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        proc[i].id = i + 1; // Process IDs from 1 to n
        printf("\nEnter arrival time, burst time, and priority for process %d: ", i + 1);
        scanf("%d %d %d", &proc[i].arrival_time, &proc[i].burst_time, &proc[i].priority);
    }

    // Sort processes based on arrival time and priority
    sortProcesses(proc, n);

    int choice;
    printf("\nChoose Scheduling Type:\n");
    printf("1. Non-Preemptive Priority Scheduling\n");
    printf("2. Preemptive Priority Scheduling\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        nonPreemptivePriorityScheduling(proc, n);
    } else if (choice == 2) {
        preemptivePriorityScheduling(proc, n);
    } else {
        printf("Invalid choice.\n");
    }

    return 0;
}
